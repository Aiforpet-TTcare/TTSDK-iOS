// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TTSDK
import ARKit
import AVFoundation
import AVKit
import Accelerate
import AudioToolbox
import CommonCrypto
import CoreGraphics
import CoreImage
import CoreMedia
import CoreMotion
import CoreVideo
import DeveloperToolsSupport
import Foundation
import SceneKit
import Swift
import SwiftUI
@_exported import TTSDK
import TensorFlowLite
import UIKit
import VideoToolbox
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TTProgressViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TTGuideViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension TTSDK.TTGuideViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension TTSDK.TTGuideViewController {
  @_Concurrency.MainActor(unsafe) public static func instanceForDogEye() -> TTSDK.TTGuideViewController
  @_Concurrency.MainActor(unsafe) public static func instanceForDogTooth() -> TTSDK.TTGuideViewController
  @_Concurrency.MainActor(unsafe) public static func instanceForSkin() -> TTSDK.TTGuideViewController
  @_Concurrency.MainActor(unsafe) public static func instanceForJoint() -> TTSDK.TTGuideViewController
  @_Concurrency.MainActor(unsafe) public static func instanceForCatEye() -> TTSDK.TTGuideViewController
  @_Concurrency.MainActor(unsafe) public static func instanceForCatTooth() -> TTSDK.TTGuideViewController
  @_Concurrency.MainActor(unsafe) public static func instance(petType: TTSDK.TTPetType, cameraType: TTSDK.TTCameraType) -> TTSDK.TTGuideViewController
}
extension TTSDK.TTGuideViewController : WebKit.WKUIDelegate, WebKit.WKNavigationDelegate {
}
@objc @_hasMissingDesignatedInitializers public class TTGuideViewModel : ObjectiveC.NSObject {
  @objc deinit
}
extension TTSDK.TTGuideViewModel {
  public static func eyeGuideViewModels(petType: TTSDK.TTPetType = .dog) -> [TTSDK.TTGuideViewModel]
}
extension TTSDK.TTGuideViewModel {
  public static func toothGuideViewModels(petType: TTSDK.TTPetType = .dog) -> [TTSDK.TTGuideViewModel]
}
extension TTSDK.TTGuideViewModel {
  public static func skinGuideViewModels(petType: TTSDK.TTPetType = .dog) -> [TTSDK.TTGuideViewModel]
}
extension TTSDK.TTGuideViewModel {
  public static func jointGuideViewModels(petType: TTSDK.TTPetType = .dog) -> [TTSDK.TTGuideViewModel]
}
public class TTJSONNull : Swift.Codable, Swift.Hashable {
  public static func == (lhs: TTSDK.TTJSONNull, rhs: TTSDK.TTJSONNull) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol TTCameraViewControllable : UIKit.UIViewController {
  func close()
  func refresh()
}
public enum TTCameraType : Swift.CaseIterable {
  case eye
  case tooth
  case skin
  case joint
  public static var identifier: Swift.String
  public static func == (a: TTSDK.TTCameraType, b: TTSDK.TTCameraType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [TTSDK.TTCameraType]
  public static var allCases: [TTSDK.TTCameraType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TTManager {
  public static var isHiddenSkeleton: Swift.Bool
  public static var isHapticEnabled: Swift.Bool
  public static var isAnimationEnabled: Swift.Bool
  public static var hostURL: Foundation.URL?
  public static var license: TTSDK.TTLicense?
  public static var accessToken: Swift.String? {
    get
  }
  public static var refreshToken: Swift.String? {
    get
  }
  public static var showGovCertMark: Swift.Bool
  public static var isFlashMode: Swift.Bool
  public static var isContinuousShooting: Swift.Bool
  public static var analysisTracker: (any TTSDK.TTAnalysisTracker)?
  public static func configure(authFileData: Foundation.Data)
  public static func setAPNS(token: Swift.String?)
  public static func configure(license: TTSDK.TTLicense)
  public static func metadata(_ info: [Swift.String : Any]?)
  public static func updateToken(_ accessToken: Swift.String?)
  public static var youtubeHander: ((Swift.String?) -> Swift.Void)?
  public static var actionHander: ((Swift.String?) -> Swift.Void)?
  public var apnsToken: Swift.String?
  @objc deinit
}
extension TTSDK.TTManager {
  public static func setLog(isOn: Swift.Bool = true)
  public static func close()
  public static func eye(petType: TTSDK.TTPetType, petId: Swift.String? = nil, petName: Swift.String? = nil, userId: Swift.String? = nil, petBirthday: Swift.String? = nil, petBreedName: Swift.String? = nil, petGender: Swift.String? = nil, petAdditionalInfo: Swift.String? = nil, guideUrl: Swift.String? = nil, isFlashMode: Swift.Bool = false, isContinuousShooting: Swift.Bool = false, showGovCertMark: Swift.Bool? = nil, resultViewController: (any TTSDK.TTResultViewCotrollable)? = nil, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public static func tooth(petType: TTSDK.TTPetType, petId: Swift.String? = nil, petName: Swift.String? = nil, userId: Swift.String? = nil, petBirthday: Swift.String? = nil, petBreedName: Swift.String? = nil, petGender: Swift.String? = nil, petAdditionalInfo: Swift.String? = nil, guideUrl: Swift.String? = nil, isFlashMode: Swift.Bool = false, isContinuousShooting: Swift.Bool = false, showGovCertMark: Swift.Bool? = nil, resultViewController: (any TTSDK.TTResultViewCotrollable)? = nil, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public static func skin(petType: TTSDK.TTPetType, petId: Swift.String? = nil, petName: Swift.String? = nil, userId: Swift.String? = nil, petBirthday: Swift.String? = nil, petBreedName: Swift.String? = nil, petGender: Swift.String? = nil, petAdditionalInfo: Swift.String? = nil, recordId: Swift.String? = nil, guideUrl: Swift.String? = nil, isFlashMode: Swift.Bool = false, isContinuousShooting: Swift.Bool = false, showGovCertMark: Swift.Bool? = nil, resultViewController: (any TTSDK.TTResultViewCotrollable)? = nil, isMeasurableDistance: Swift.Bool = false, isCameraDistance: Swift.Bool = false, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public static func joint(petType: TTSDK.TTPetType, petId: Swift.String? = nil, petName: Swift.String? = nil, userId: Swift.String? = nil, petBirthday: Swift.String? = nil, petBreedName: Swift.String? = nil, petGender: Swift.String? = nil, petAdditionalInfo: Swift.String? = nil, guideUrl: Swift.String? = nil, isFlashMode: Swift.Bool = false, isContinuousShooting: Swift.Bool = false, showGovCertMark: Swift.Bool? = nil, resultViewController: (any TTSDK.TTResultViewCotrollable)? = nil, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public static func guideViewController(petType: TTSDK.TTPetType, cameraType: TTSDK.TTCameraType) -> UIKit.UIViewController
  public static func guideViewController(cameraType: TTSDK.TTCameraType, guideUrl: Foundation.URL?) -> UIKit.UIViewController
  public static func showGuideFirst(cameraType: TTSDK.TTCameraType, petType: TTSDK.TTPetType, petId: Swift.String? = nil, petName: Swift.String? = nil, userId: Swift.String? = nil, petBirthday: Swift.String? = nil, petBreedName: Swift.String? = nil, petGender: Swift.String? = nil, petAdditionalInfo: Swift.String? = nil, recordId: Swift.String? = nil, guideUrl: Swift.String? = nil, isFlashMode: Swift.Bool = false, isContinuousShooting: Swift.Bool = false, showGovCertMark: Swift.Bool? = nil, resultViewController: (any TTSDK.TTResultViewCotrollable)? = nil, isMeasurableDistance: Swift.Bool = false, isCameraDistance: Swift.Bool = false, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public static func clearUserDefaults()
}
public enum TTPetType : Swift.String, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
  case dog
  case cat
  public init?(rawValue: Swift.String)
  public typealias AllCases = [TTSDK.TTPetType]
  public typealias RawValue = Swift.String
  public static var allCases: [TTSDK.TTPetType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct TTResult : Swift.Codable {
  public var dataValue: TTSDK.TTData? {
    get
  }
  public var string: Swift.String? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TTData : Swift.Codable {
  public var diagID: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TTPositionCode : Swift.String, Swift.Codable {
  case eyeRight
  case eyeLeft
  case toothFront
  case toothRight
  case toothLeft
  case skinEar
  case skinBody
  case skinFoot
  case skinEtc
  case jointLeftToRight
  case jointRightToLeft
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TTGalleryViewController : UIKit.UIViewController, UIKit.UIScrollViewDelegate, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol TTAnalysisTracker {
  func trackEvent(eventName: Swift.String, properties: [Swift.String : Swift.String])
  func trackScreen(screenName: Swift.String)
}
public struct TTPosition : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TTLicense : Swift.Codable {
  public init(serviceRegion: Swift.String? = nil, serviceHost: Swift.String? = nil, clientID: Swift.String? = nil, clientKeyID: Swift.String? = nil, clientKeySecret: Swift.String? = nil, clientKey: Swift.String? = nil, accessToken: Swift.String? = nil, accountId: Swift.String? = nil, fcmToken: Swift.String? = nil, showGovCertMark: Swift.Bool? = nil)
  public var serviceRegion: Swift.String?
  public var serviceHost: Swift.String?
  public var clientID: Swift.String?, clientKeyID: Swift.String?, clientKeySecret: Swift.String?, clientKey: Swift.String?
  public var accessToken: Swift.String?
  public var accountID: Swift.String?
  public var fcmToken: Swift.String?
  public var showGovCertMark: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias TTResultCompletion = (Swift.Int?) -> any TTSDK.TTResultViewCotrollable
public protocol TTResultViewCotrollable : UIKit.UIViewController {
  var backCompletaion: (() -> Swift.Void)? { get set }
  var closeCompletaion: (() -> Swift.Void)? { get set }
  var result: TTSDK.TTResult? { get set }
  func close()
  func back()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TTCameraGuideViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TTSDK.TTCameraGuideViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
  @available(iOS 14.5, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, navigationAction: WebKit.WKNavigationAction, didBecome download: WebKit.WKDownload)
  @available(iOS 14.5, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, navigationResponse: WebKit.WKNavigationResponse, didBecome download: WebKit.WKDownload)
}
extension TTSDK.TTCameraGuideViewController : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webViewDidClose(_ webView: WebKit.WKWebView)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 15.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decideMediaCapturePermissionsFor origin: WebKit.WKSecurityOrigin, initiatedBy frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType) async -> WebKit.WKPermissionDecision
  #endif
  @available(iOS 15.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, requestDeviceOrientationAndMotionPermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, contextMenuConfigurationFor elementInfo: WebKit.WKContextMenuElementInfo) async -> UIKit.UIContextMenuConfiguration?
  #endif
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, contextMenuWillPresentForElement elementInfo: WebKit.WKContextMenuElementInfo)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, contextMenuForElement elementInfo: WebKit.WKContextMenuElementInfo, willCommitWithAnimator animator: any UIKit.UIContextMenuInteractionCommitAnimating)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, contextMenuDidEndForElement elementInfo: WebKit.WKContextMenuElementInfo)
  @available(iOS 16.4, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, willPresentEditMenuWithAnimator animator: any UIKit.UIEditMenuInteractionAnimating)
  @available(iOS 16.4, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, willDismissEditMenuWithAnimator animator: any UIKit.UIEditMenuInteractionAnimating)
}
public struct TTThumbnail : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TTDetail : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension TTSDK.TTPetType : Swift.RawRepresentable {}
extension TTSDK.TTCameraType : Swift.Equatable {}
extension TTSDK.TTCameraType : Swift.Hashable {}
extension TTSDK.TTPositionCode : Swift.Equatable {}
extension TTSDK.TTPositionCode : Swift.Hashable {}
extension TTSDK.TTPositionCode : Swift.RawRepresentable {}
